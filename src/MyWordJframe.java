
import java.awt.FileDialog;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import static java.sql.Types.NULL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author racer
 */
public class MyWordJframe extends javax.swing.JFrame {

    /**
     * Creates new form MyWordJframe
     */
        String programName="MyWordPad";
        String fileName="";
        String holdText,fn,dir;
        boolean textChanged=false;
        String oldText;
        Clipboard clip=getToolkit().getSystemClipboard();
    
        
        public MyWordJframe() {
        initComponents();
        }
        
        public void checkFile() throws IOException
        {
            BufferedReader read;
            StringBuffer sb=new StringBuffer();
            try
            {
                read=new BufferedReader(new FileReader(fileName));
                String line;
                while((line=read.readLine())!=null)
                {
                    sb.append(line+'\n');
                }
                TextArea.setText(sb.toString());
                read.close();
            }
            catch(FileNotFoundException e)
             {
                        System.out.println("File Not Found\n");
             }
            catch(IOException ioe)
            {
                
            }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        File_NewFile = new javax.swing.JMenuItem();
        File_OpenFile = new javax.swing.JMenuItem();
        File_OpenRecent = new javax.swing.JMenuItem();
        File_Save = new javax.swing.JMenuItem();
        File_SaveAs = new javax.swing.JMenuItem();
        File_Quit = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        Edit_Copy = new javax.swing.JMenuItem();
        Edit_Cut = new javax.swing.JMenuItem();
        Edit_Paste = new javax.swing.JMenuItem();
        Edit_Text = new javax.swing.JMenu();
        EditTextColor = new javax.swing.JMenuItem();
        EditTextBold = new javax.swing.JMenuItem();
        EditTextItalics = new javax.swing.JMenuItem();
        EditTextUnderline = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyWordPad");
        setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        TextArea.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                TextAreaInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        TextArea.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TextAreaPropertyChange(evt);
            }
        });
        TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TextArea);

        FileMenu.setText("File");
        FileMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        File_NewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        File_NewFile.setText("New File");
        File_NewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_NewFileActionPerformed(evt);
            }
        });
        FileMenu.add(File_NewFile);

        File_OpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        File_OpenFile.setText("Open File...");
        File_OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_OpenFileActionPerformed(evt);
            }
        });
        FileMenu.add(File_OpenFile);

        File_OpenRecent.setText("Open Recent");
        FileMenu.add(File_OpenRecent);

        File_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        File_Save.setText("Save");
        File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_SaveActionPerformed(evt);
            }
        });
        FileMenu.add(File_Save);

        File_SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        File_SaveAs.setText("Save As...");
        File_SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_SaveAsActionPerformed(evt);
            }
        });
        FileMenu.add(File_SaveAs);

        File_Quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        File_Quit.setText("Quit");
        File_Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_QuitActionPerformed(evt);
            }
        });
        FileMenu.add(File_Quit);

        MenuBar.add(FileMenu);

        EditMenu.setText("Edit");

        Edit_Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Copy.setText("Copy");
        Edit_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_CopyActionPerformed(evt);
            }
        });
        EditMenu.add(Edit_Copy);

        Edit_Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Cut.setText("Cut");
        Edit_Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_CutActionPerformed(evt);
            }
        });
        EditMenu.add(Edit_Cut);

        Edit_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Paste.setText("Paste");
        Edit_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_PasteActionPerformed(evt);
            }
        });
        EditMenu.add(Edit_Paste);

        Edit_Text.setText("Text");

        EditTextColor.setText("Color");
        Edit_Text.add(EditTextColor);

        EditTextBold.setText("Bold");
        Edit_Text.add(EditTextBold);

        EditTextItalics.setText("Italics");
        Edit_Text.add(EditTextItalics);

        EditTextUnderline.setText("Underline");
        Edit_Text.add(EditTextUnderline);

        EditMenu.add(Edit_Text);

        MenuBar.add(EditMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void File_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_SaveAsActionPerformed
        // TODO add your handling code here:
        saveAs();
    }//GEN-LAST:event_File_SaveAsActionPerformed

    private void File_QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_QuitActionPerformed
        // TODO add your handling code here:
        String str=TextArea.getText();
        if(str.length()==0||textChanged==false)
        {
            System.exit(0);
        }
        else
        {
            int confirm =JOptionPane.showConfirmDialog(this, "Do you Save this document before exit ?");
            if(confirm==JOptionPane.YES_OPTION)
            {
                if(fileName.equals(""))
                    saveAs();
                else
                    save(fileName);
            }
        }
    }//GEN-LAST:event_File_QuitActionPerformed

    private void File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_SaveActionPerformed
        // TODO add your handling code here:
        
        if(fileName.equals(""))
        {
            saveAs();
        }
        else
        {
            save(fileName);
        }
    }//GEN-LAST:event_File_SaveActionPerformed

    private void TextAreaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TextAreaInputMethodTextChanged
        // TODO add your handling code here:
       
    }//GEN-LAST:event_TextAreaInputMethodTextChanged

    private void TextAreaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TextAreaPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_TextAreaPropertyChange

    private void TextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAreaKeyPressed
        // TODO add your handling code here:
        String newText=TextArea.getText();
        if(newText!=oldText)
        {
            if(textChanged==false)
                setTitle("*"+getTitle());
            textChanged=true;
            oldText = newText;
            File_Save.setEnabled(textChanged);
        }
    }//GEN-LAST:event_TextAreaKeyPressed

    private void File_NewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_NewFileActionPerformed
        // TODO add your handling code here:
        newfile();
    }//GEN-LAST:event_File_NewFileActionPerformed

    private void File_OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_OpenFileActionPerformed
        // TODO add your handling code here:
        String str=TextArea.getText();
        if(str.length()==0||textChanged==false)
        {
            textChanged=false;
            FileDialog fd =new  FileDialog(this,"Choose File",FileDialog.LOAD);
            fd.show();
            if(fd.getFile()!=null)
            {
                fileName=fd.getDirectory()+fd.getFile();
                setTitle(fileName);
                try {
                    checkFile();
                } catch (IOException ex) {
                    Logger.getLogger(MyWordJframe.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
             TextArea.requestFocus();
        }
        else
        {
            int confirm=JOptionPane.showConfirmDialog(this, "Do you want to save before exit ?");
            if(confirm==JOptionPane.YES_OPTION)
            {
                if(fileName.equals(""))
                    saveAs();
                else
                    save(fileName);
            }
            else if(confirm==JOptionPane.NO_OPTION)
            {
                textChanged=false;
                FileDialog fd =new  FileDialog(this,"Choose File",FileDialog.LOAD);
                fd.show();
                if(fd.getFile()!=null)
                {
                    fileName=fd.getDirectory()+fd.getFile();
                    setTitle(fileName);
                    try {
                        checkFile();
                    } catch (IOException ex) {
                        Logger.getLogger(MyWordJframe.class.getName()).log(Level.SEVERE, null, ex);
                    }
               
                }
                TextArea.requestFocus();
            }
        }
        
    }//GEN-LAST:event_File_OpenFileActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        String str=TextArea.getText();
        if(str.length()==0||textChanged==false)
        {
            System.exit(0);
        }
        else
        {
            int confirm =JOptionPane.showConfirmDialog(null, "Do you Save this document before exit ?");
            if(confirm==JOptionPane.YES_OPTION)
            {
                if(fileName.equals(""))
                    saveAs();
                else
                    save(fileName);
            }
        }
        
    }//GEN-LAST:event_formWindowClosed

    private void Edit_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_CopyActionPerformed
        // TODO add your handling code here:
        StringSelection ss = new StringSelection(TextArea.getSelectedText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
    }//GEN-LAST:event_Edit_CopyActionPerformed

    private void Edit_CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_CutActionPerformed
        // TODO add your handling code here:
        StringSelection ss = new StringSelection(TextArea.getSelectedText());
        String selectText=(TextArea.getSelectedText()).toString();
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
        selectText.replace(selectText,"");
    }//GEN-LAST:event_Edit_CutActionPerformed

    private void Edit_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_PasteActionPerformed
        // TODO add your handling code here:
        Clipboard c=this.getToolkit().getSystemClipboard();
        StringSelection ss = new StringSelection(TextArea.getSelectedText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
        
    }//GEN-LAST:event_Edit_PasteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int confirm =JOptionPane.showConfirmDialog(null,"Do you want to save before exit?" );
        if(confirm==JOptionPane.YES_OPTION)
        {
            if(fileName.equals(""))
                saveAs();
            else
                save(fileName);
            System.exit(0);
        }
        else
        {
            System. exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
               
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyWordJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyWordJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyWordJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyWordJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyWordJframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem EditTextBold;
    private javax.swing.JMenuItem EditTextColor;
    private javax.swing.JMenuItem EditTextItalics;
    private javax.swing.JMenuItem EditTextUnderline;
    private javax.swing.JMenuItem Edit_Copy;
    private javax.swing.JMenuItem Edit_Cut;
    private javax.swing.JMenuItem Edit_Paste;
    private javax.swing.JMenu Edit_Text;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem File_NewFile;
    private javax.swing.JMenuItem File_OpenFile;
    private javax.swing.JMenuItem File_OpenRecent;
    private javax.swing.JMenuItem File_Quit;
    private javax.swing.JMenuItem File_Save;
    private javax.swing.JMenuItem File_SaveAs;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void saveAs() {
        //throw new UnsupportedOperationException("Not supported yet."); 
//To change body of generated methods, choose Tools | Templates.
        FileDialog fd =new FileDialog(MyWordJframe.this, "Save",FileDialog.SAVE);
        fd.show();
        if(fd.getFile()!=null)
        {
            fn=fd.getFile();
            dir=fd.getDirectory();
            fileName=dir+fn+".txt";
            setTitle(fileName);
            try
            {
                DataOutputStream d=new DataOutputStream((new FileOutputStream(fileName)));
                holdText=TextArea.getText();
                BufferedReader br =new BufferedReader(new StringReader(holdText));
                while((holdText=br.readLine())!=null)
                {
                     d.writeBytes(holdText+"\r\n");
                }
                d.close();
            }
            catch(Exception e)
            {
                System.out.println("File Not Found");
            }
            TextArea.requestFocus();
            save(fileName);
        }
        
        
    }

    private void save(String fileName) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        setTitle(programName+" "+fileName);
        try
        {
            FileWriter out=new FileWriter(fn);
            out.write(TextArea.getText());
            out.close();
        }
        catch(Exception e)
        {
            System.out.println("Err......");
        }
        textChanged=false;
        File_Save.setEnabled(textChanged);
        oldText=TextArea.getText();
     }

    private void newfile() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       String str=TextArea.getText();
       if(str.length()==0||textChanged==false)
       {
           setTitle("UnTitled-"+programName);
           textChanged=false;
           TextArea.setText("");
       }
       else
       {
           int confirm =JOptionPane.showConfirmDialog(this,"Save Before Exit");
           if(confirm==JOptionPane.YES_OPTION)
           {
               if(fileName.equals(""))
               {
                   saveAs();
               }
               else
               {
                   save(fileName);
               }
           }
           else if(confirm==JOptionPane.NO_OPTION)
           {
               TextArea.setText("");
               textChanged=false;
               fileName="";
           }
       }
    
    }
}
